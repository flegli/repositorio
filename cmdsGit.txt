- Git init: inicia um repositorio GIT.
- Git status: verifica alterações na branch.
- Git rm -f: remove um arquivo.
- Git add: coloca arquivo com alterações na area de stage.
           git add .: coloca todos os arquivos alterados na stage.
           git add <arquivoExemplo>: coloca o arquivo, arquivoExemplo, na area de stage.
- Git checkout -- <arquivoExemplo>: descarte das alterações, antes do cmd 'git add'.
- Git commit -m 'mensagem': faz o commit ja adicionando a mensagem.
- Git config --global credential.helper 'store': Comando para criar credenciais de login no GitHub.
            Criar o arquivo, '.git-credentials' e inserir a linha: https://user:pass@github.com
- Git remote: Para conectar com repositorios remotos.
            git remote -v: para verificar repositorios remotos ja configurados.
            git remote add origin <url>: adicionar repositorio remoto.
- Git push: envio de arquivos para repositorio remoto
            git push --set-upstream origin master: equalizando a branch master local com o repositorio remoto.
* O erro fatal: refusing to merge unrelated histories geralmente acontece quando você tenta fazer o git pull de um repositório remoto, mas o seu repositório local possuí um histórico de commits, branches, etc, diferente do que está no repositório remoto.
  Para permitir que o Git faça o merge de dois projetos com históricos diferentes, é só passar o parâmetro --allow-unrelated-histories quando for fazer o pull, assim:
  git pull origin master --allow-unrelated-histories
  (lembre-se de trocar os nomes do remote e branch para os que você utiliza)
- Git clone <url>: comando para clonar repositorios.
- Git pull: atualiza o repositorio local com a ultima versão do servidor.
- Git fetch: informa difrenças entre a branch local e o servidor.
* Comando para mostrar a branch que atual, inserir no ./bash_profile:
export CLICOLOR=1
export LSCOLORS=ExFxBxDxCxegedabagacad
export PS1="\[\033[36m\]\u\[\033[m\]@\[\033[32m\]\h:\[\033[33;1m\]\w\[\033[m\]\$(parse_git_branch) $ "
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
- Git log: listagem com todos os commits que foram feitos na branch. Para sair tecle "q".
- Git tag: para marcar commit como releases. exemplo:
    git push (sobe alterações)
    git tag <versao> (marca a ultima alteração com a <versão>)
    git --tags (sobe a tag para o servidor)
- Git branch: criar branches.
    git branch <nome branch> (cria branch);
    git branch (lista as branches)
    git branch -D <nomeBranch> (apaga a branch "nomeBranch")
- Git checkout (branches):
    git checkout -b <nomeBranch> (Muda da branch atual para a "nomeBranch")
        Caso no ambiente local não exita a nomeBranch e esta exita no servidor será criada esta branchno ambiente local.
- Git merge: equalizando branches
    entrar na branch a ser atualizada (master);
    git merge <nomeBranch> (atualiza a branch atual com a nomeBranch)
- Git log: historico de commits
- Git Rebase: assistir novamente
- Git cherry-pic: selecionar e retornar a detrminados commits
    git cherry-pic <rash>
